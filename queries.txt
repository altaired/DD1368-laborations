Task 1

WITH country_capital AS (
  SELECT country.name AS country, country.code, city.name AS capital, city.population AS capital_population 
  FROM country 
  LEFT JOIN city ON city.country = country.code AND city.name = country.capital
  ORDER BY country
), country_capital_limited AS (
  SELECT * FROM country_capital WHERE capital_population > 5000000
), provinces AS (
  SELECT country, count(country) AS provinces 
  FROM province GROUP BY country 
  ORDER BY provinces DESC
) 

SELECT * FROM country_capital_limited 
INNER JOIN provinces 
ON country_capital_limited.code = provinces.country 
AND provinces.provinces > 10;

    country     | code |     capital      | capital_population | country | provinces 
----------------+------+------------------+--------------------+---------+-----------
 Russia         | R    | Moskva           |           11979529 | R       |        82
 Japan          | J    | Tokyo            |            8591695 | J       |        47
 India          | IND  | Delhi            |           11034555 | IND     |        36
 Colombia       | CO   | Bogotá           |            7776845 | CO      |        33
 Indonesia      | RI   | Jakarta          |            9607787 | RI      |        33
 Mexico         | MEX  | Ciudad de México |            8555272 | MEX     |        32
 China          | CN   | Beijing          |           11716620 | CN      |        31
 Iran           | IR   | Tehran           |            8693706 | IR      |        31
 Zaire          | ZRE  | Kinshasa         |           11575000 | ZRE     |        26
 Peru           | PE   | Lima             |            7605742 | PE      |        26
 Angola         | ANG  | Luanda           |            6760439 | ANG     |        18
 Iraq           | IRQ  | Baghdad          |            5750000 | IRQ     |        18
 United Kingdom | GB   | London           |            8250205 | GB      |        12

Task 2

WITH landlocked AS(
  SELECT *
  FROM located LEFT JOIN city
  ON located.city = city.name AND city.population > 3000000
  WHERE river IS NULL AND lake IS NULL AND sea IS NULL
)

  SELECT (SELECT count(*) AS landlocked FROM landlocked), count(*) AS all
  FROM city
  WHERE city.population > 3000000;
  
   landlocked | all 
------------+-----
         18 | 102


Task 3

WITH country_mountains AS (
  SELECT geo_mountain.country, count(geo_mountain.country) AS mountains
  FROM mountain
  FULL JOIN geo_mountain ON mountain.name = geo_mountain.mountain
  GROUP BY country
  ORDER BY mountains DESC
), many_mountains AS (
  SELECT * FROM country_mountains 
  WHERE mountains > (SELECT AVG(mountains) FROM country_mountains)
), top AS (
  SELECT count(country) AS count_countries, mountains AS count_mountains 
  FROM many_mountains 
  GROUP BY mountains 
  ORDER BY count_countries DESC, mountains DESC
) SELECT * FROM top WHERE count_countries = (SELECT MAX(count_countries) FROM top);

 count_countries | count_mountains 
-----------------+-----------------
               5 |               8
               5 |               5


Task 4

WITH c1 AS (
  SELECT country1 AS country, COUNT(country1) AS count FROM borders GROUP BY country1
), c2 AS (
  SELECT country2 AS country, COUNT(country2) AS count FROM borders GROUP BY country2
), total AS (
  SELECT COALESCE(c1.country, c2.country) AS CC, COALESCE(c1.count, 0) + COALESCE(c2.count, 0) as total
  FROM c1
  FULL JOIN c2 ON c1.country = c2.country
) SELECT country.name, total.total 
FROM total LEFT JOIN country ON country.code = total.CC 
WHERE total.total = (SELECT min(total) FROM total);

        name        | total 
--------------------+-------
 Denmark            |     1
 Monaco             |     1
 Gibraltar          |     1
 Holy See           |     1
 Ceuta              |     1
 Melilla            |     1
 Ireland            |     1
 San Marino         |     1
 Portugal           |     1
 United Kingdom     |     1
 Brunei             |     1
 Hong Kong          |     1
 Macao              |     1
 Timor-Leste        |     1
 Papua New Guinea   |     1
 South Korea        |     1
 Qatar              |     1
 Canada             |     1
 Dominican Republic |     1
 Haiti              |     1
 Sint Maarten       |     1
 Saint Martin       |     1
 Gambia             |     1
 Lesotho            |     1
 
 
 Task 5
 
 WITH mountains AS(
  SELECT country.name AS name, mountain.name AS mountain, encompasses.continent AS continent,
  mountain.elevation AS height,
  sqrt(POWER((mountain.coordinates).latitude, 2)
  + POWER((mountain.coordinates).longitude, 2)) AS distance
  FROM mountain LEFT JOIN geo_mountain
  ON mountain.name = geo_mountain.mountain 
  LEFT JOIN encompasses
  ON encompasses.country = geo_mountain.country
  LEFT JOIN country
  ON geo_mountain.country = country.code
)

SELECT DISTINCT name, mountain, continent, height, distance
FROM mountains x 
WHERE distance = (SELECT min(distance) FROM mountains WHERE mountains.continent = x.continent)


         name          |      mountain      |     continent     | height |      distance       
-----------------------+--------------------+-------------------+--------+---------------------
 Indonesia             | Seulawah Agam      | Australia/Oceania |   1810 | 95.8051407806491353
 Spain                 | Pico de las Nieves | Europe            |   1949 | 30.2780861350251132
 Egypt                 | Shaiyb al-Banat    | Asia              |   2187 | 43.0058193736615138
 Sao Tome and Principe | Pico de Sao Tome   | Africa            |   2024 |  6.6030296076876711
 Brazil                | Pico da Bandeira   | America           |   2892 | 46.5299215559192620

Task 6

WITH tr AS(
  SELECT SUM(population) AS population
  FROM city
  WHERE latitude > 0 AND longitude > 0
), tl AS(
  SELECT  SUM(population) AS population
  FROM city
  WHERE latitude < 0 AND longitude > 0
), br AS(
  SELECT  SUM(population) AS population
  FROM city
  WHERE latitude > 0 AND longitude < 0
), bl AS(
  SELECT  SUM(population) AS population
  FROM city
  WHERE latitude < 0 AND longitude < 0
), total AS(
  SELECT *
  FROM tr
  UNION ALL
  SELECT * 
  FROM tl
  UNION ALL 
  SELECT *
  FROM br
  UNION ALL 
  SELECT *
  FROM bl
)

SELECT MIN(population) AS dividend, MAX(population) AS divisor, MIN(population)/MAX(population) AS ratio
FROM total

 dividend  |  divisor   |         ratio          
-----------+------------+------------------------
 142291579 | 1186720665 | 0.11990317788896007807
 
 Task 7
 
 
